package oniet;

import java.beans.Statement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class ABM {

	public static void DAODB() throws ClassNotFoundException {

	}

	public static ArrayList<item> getPunto1(Connection connection) {
		String select1 = "SELECT * FROM `items` ORDER BY DateCreated DESC";
		item i = new item();
		ArrayList<item> lista1 = new ArrayList<item>();
		java.sql.Statement st = null;

		try {
			st = connection.createStatement();
			ResultSet rs = st.executeQuery(select1);

			while (rs.next()) {
				i.setId(rs.getString("id"));
				i.setDate(rs.getString("DateCreated"));
				i.setSiteld(rs.getString("SiteId"));
				i.setTite(rs.getString("Tite"));
				i.setSellerId(rs.getLong("SellerId"));
				i.setCategoryId(rs.getString("CategoryId"));
				i.setPrice(rs.getFloat("Price"));
				i.setBasePrice(rs.getFloat("BasePrice"));
				i.setCurrencyId(rs.getString("CurrencyId"));
				i.setInitialQuantity(rs.getInt("InitialQuantity"));
				i.setAvailableQuantity(rs.getInt("AvailableQuantity"));

				lista1.add(i);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return lista1;
	}

	public static ArrayList<orden> getPunto2(Connection connection) {
		String select2 = "SELECT * FROM `orders` ORDER BY DateCreated DESC";
		orden o = new orden();
		ArrayList<orden> lista2 = new ArrayList<orden>();
		java.sql.Statement st = null;

		try {
			st = connection.createStatement();
			ResultSet rs = st.executeQuery(select2);

			while (rs.next()) {
				o.setId(rs.getString("id"));
				o.setDateCreate(rs.getString("DateCreated"));
				o.setStatus(rs.getString("Status"));
				o.setSellerId(rs.getString("SellerId"));
				o.setSellerNickName(rs.getString("SellerNickname"));
				o.setBuyerId(rs.getString("BuyerId"));
				o.setBuyerNickname(rs.getString("BuyerNickname"));
				o.setTotalAmount(rs.getInt("TotalAmount"));
				o.setPaidAmount(rs.getFloat("PaidAmount"));
				o.setTotalAmountWithShipping(rs.getFloat("TotalAmountWithShipping"));
				o.setQuantity(rs.getInt("Quantity"));
				o.setCurrency(rs.getString("Curency"));
				o.setItemId(rs.getString("ItemId"));
				o.setItemTitle(rs.getString("ItemTitle"));
				o.setItemCategory(rs.getString("ItemCategory"));
				o.setPaymentSiteId(rs.getString("PaymentSiteld"));
				o.setPaymentReason(rs.getString("PaymentReason"));
				o.setPaymentType(rs.getString("PaymentType"));
				o.setPaymentStatus(rs.getString("PaymentsStatus"));

				lista2.add(o);

			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return lista2;
	}

	public static usuario getPunto3(Connection connection, String compradorBuscado){
		String select3= "SELECT orders.BuyerNickname, SUM(orders.TotalAmount), orders.PaymentType, orders.SellerNickname FROM `orders` WHERE orders.BuyerNickname='"+compradorBuscado+"'";
		usuario u = new usuario();
		java.sql.Statement st=null;
		ArrayList<usuario> listaUsuario;
		
		
		try{
			st=connection.createStatement();
			ResultSet rs= st.executeQuery(select3);
			
			while(rs.next()){
	u.nombre=rs.getString("BuyerNickname");
	u.totalCompra=rs.getDouble("SUM(TotalAmount)");
	String medioss=rs.getString("PaymentType");
	ArrayList<String>listaMedios;
	listaMedios.add(medioss);
	u.medios=listaMedios;
	
	String vend=rs.getString("SellerNickname");
	ArrayList<String>listaVendedores;
	listaVendedores.add(vend);
	u.vendedores=listaVendedores;		
}
		}catch(SQLException e){
			e.printStackTrace();
		}
		return u;
	}
	
}